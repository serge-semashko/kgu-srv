//4
unit uwebserv;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtCtrls, HTTPSend, ulkjson, blcksock, winsock,
  Synautil, strutils, AppEvnts, Menus, inifiles, das_const,
     zlibexapi,ZLIBEX, IdBaseComponent, IdComponent, IdTCPConnection,
  IdTCPClient, IdHTTP, Vcl.ComCtrls, IdException;

type
  THTTPSRVForm = class(TForm)
    Panel1: TPanel;
    Memo2: TMemo;
    URLED: TEdit;
    SpeedButton1: TSpeedButton;
    Memobody: TMemo;
    ApplicationEvents1: TApplicationEvents;
    PopupMenu1: TPopupMenu;
    quit1: TMenuItem;
    kgu1stdtxt: TStaticText;
    kgu1freqtxt: TStaticText;
    kgu2stdtxt: TStaticText;
    kgu2freqtxt: TStaticText;
    tmr1: TTimer;
    Memo1: TMemo;
    Timer1: TTimer;
    insat_timer: TTimer;
    IdHTTPmac30: TIdHTTP;
    mac30Timer: TTimer;
    StatusBar1: TStatusBar;
    tangoTimer: TTimer;
    procedure FormCreate(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure ApplicationEvents1Minimize(Sender: TObject);
    procedure quit1Click(Sender: TObject);
//    procedure MinimilzeClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Restore1Click(Sender: TObject);
    procedure Restart1Click(Sender: TObject);
    procedure tmr1Timer(Sender: TObject);
    procedure insat_timerTimer(Sender: TObject);
    procedure mac30TimerTimer(Sender: TObject);
    procedure tangoTimerTimer(Sender: TObject);
  private
    { Private declarations }
  protected
//    procedure ControlWindow(var Msg: TMessage); message WM_SYSCOMMAND;
//    procedure IconMouse(var Msg: TMessage); message WM_USER + 1;
  public
  end;
//Function setVariable(ObjName,VarName:widestring;value:string);

  TTCPHttpDaemon = class(TThread)
  private
    Sock: TTCPBlockSocket;
  public
    constructor Create;
    destructor Destroy; override;
    procedure Execute; override;
  end;

  TTCPHttpThrd = class(TThread)
  private
    Sock: TTCPBlockSocket;
  public
    Headers: TStringList;
    InputData, OutputData: TMemoryStream;
    constructor Create(hsock: tSocket);
    destructor Destroy; override;
    procedure Execute; override;
    function ProcessHttpRequest(Request, URI: ansistring): integer;
  end;

var
  PortNum: integer = 9090;
  linenum : integer = 0;
  textfromjson: ansistring = '[]';
  currentData: ansistring = '{}';
  testjson: ansistring = '[{"time":"18:57:40","sbrkgu1":0,"sbrkgu2":0,"k1t6":272.73,"k1t12":295.05,"k1t13":288.41,"k1dt5t6":12.15,"k1dt3t4":2.73,"k1sbr":0,' + '"k1vanna":0,"k1bo1":0.37,"k1bo2":0,"k2t6":108.89,"k2t12":211.58,"k2t13":286.86,"k2dt5t6":-2.02,"k2dt3t4":-1.91,"k2sbr":0,"k2vanna":0,' + '"k2bo1":0,"k2bo2":58.79}]';

var
//sqlite
//*counters variables
  mac30_data: ansistring ='';

  FullProgPath: PansiChar;
  need_terminate: boolean = false;
  kgu_counter_com_number: array[0..1] of char = (#6, #7);
  freq, msectime: int64;
  kgu_st_time: array[0..1, 0..7] of int64;
  kgu_sumx, kgu_sumx2: array[0..1, 0..7] of double;
  kgu_freqHist: array[0..1, 0..7, 0..10] of double;
  kgu1port: word = 100;
  kgu2port: word = 100;
  cntVal: dword;
  skgu_freq: array[0..1, 0..7] of int64;
  kgu_std, kgu_mean: array[0..1, 0..7] of double;
  kgu_freq: array[0..1, 0..7] of double;
  kgu_counter: array[0..1, 0..7] of dword;
  nSum: integer = 0;
  HTTP: THTTPSend = nil;
  HTTPsrv: TTCPHttpDaemon;
  HTTPSRVFORM: THTTPSRVFORM;
  URL, URLInsat: ansistring;
  insat_data: ansistring = '';
  booster_data: ansistring = '';
  current_data :ansistring ='{}';
  json_last_data :ansistring ='{}';
  Histjson: tstringlist;
  subobj: tlkjsonobject;
  LastUpdate: double = 0;
   hexmap : array[0..15] of ansichar = ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');
//*

implementation

uses
  Unit1, shellapi, i7000, i7000u, dcon_pc;

{$R *.dfm}
type
  PRaiseFrame = ^TRaiseFrame;

  TRaiseFrame = packed record
    NextRaise: PRaiseFrame;
    ExceptAddr: Pointer;
    ExceptObject: TObject;
    ExceptionRecord: PExceptionRecord;
  end;
function compress2send(instr:ansistring):ansistring;
var
   tmpstr : ansistring;
   i1 : integer;
   t1,t2,st : int64;
   pch : pansichar;
begin
     getmem(pch,10000000);

    tmpstr := ZCompressStr(INSTR,zcLevel3);
    Assert(length(tmpstr)<=3000000,'РЎС‚СЂРѕРєР° РїРѕСЃР»Рµ РєРѕРјРїСЂРµСЃСЃРёРё Р±РѕР»СЊС€Рµ 3РјР±');
    result := '';
    FillChar(pch^,10000000,0);
    for i1 := 1 to length(tmpstr) do begin
                                        pch[2*(i1-1)] := hexmap[ord(tmpstr[i1]) shr 4];
                                        pch[2*(i1-1)+1] := hexmap[ord(tmpstr[i1]) and $0f];
                                     end;
    result := pch;
    freemem(pch);
end;
function compress2bin(instr:ansistring):ansistring;
var
   tmpstr : ansistring;
   i1 : integer;
   t1,t2,st : int64;
   pch : pansichar;
begin
    result := ZCompressStr(INSTR,zcLevel3);
end;


function GenerateOutText(inlist: tstringlist): ansistring;
var
  i: integer;
  str1: ansistring;
begin
//  writeTimeLog('generate begin');

  str1 := '[';
  for i := 0 to inlist.Count - 1 do
    str1 := str1 + inlist[i] + ', ';
  str1 := str1 + ']';
//  writeTimeLog('generate end');
  result := str1;
end;
(*
procedure THTTPSRVForm.IconMouse(var Msg: TMessage);
var
  p: tpoint;
begin
  GetCursorPos(p); // Запоминаем координаты курсора мыши
  case Msg.LParam of  // Проверяем какая кнопка была нажата
    WM_LBUTTONUP, WM_LBUTTONDBLCLK: {Действия, выполняемый по одинарному или двойному щелчку левой кнопки мыши на значке. В нашем случае это просто активация приложения}
      begin
//        ShowWindow(Application.Handle, SW_SHOW); // Восстанавливаем кнопку программы
        ShowWindow(Handle, SW_SHOW); // Восстанавливаем окно программы
      end;
    WM_RBUTTONUP: {Действия, выполняемый по одинарному щелчку правой кнопки мыши}
      begin
        SetForegroundWindow(Handle);                   // Восстанавливаем программу в качестве переднего окна
        PopupMenu1.Popup(p.X, p.Y);  // Заставляем всплыть тот самый TPopUp о котором я говорил чуть раньше
        PostMessage(Handle, WM_NULL, 0, 0);
      end;
  end;
end;
*)
(*
procedure THTTPSRVForm.ControlWindow(var Msg: TMessage);
begin
  if Msg.WParam = SC_MINIMIZE then
  begin
    ShowWindow(Handle, SW_HIDE);  // ???????? ?????????
//    ShowWindow(Application.Handle, SW_HIDE);  // ???????? ?????? ? TaskBar'?
  end
  else
    inherited;
end;
  *)
procedure THTTPSRVForm.FormCreate(Sender: TObject);
var
  ff: tfilestream;
  str1: ansistring;
  objFileName: ansistring;
  strlist: tstringlist;
  i1,wret,kgunum,chnum : integer;
begin


//  Ic(1, Application.Icon);  // ????????? ?????? ? ????
  writetimelog('wait start' + IntToStr(trunc((now - StartTime) * 24 * 3600)));
//  while (now - StartTime) * 24 * 3600 < 13 do
//    application.ProcessMessages;
  writetimelog('wait end ' + IntToStr(trunc((now - StartTime) * 24 * 3600)));
    writeTimeLog('init  counters');

  kgu1port := Open_Com(kgu_counter_com_number[0], 9600, char(8), char(0), char(0));
  kgu2port := Open_Com(kgu_counter_com_number[1], 9600, char(8), char(0), char(0));
  QueryPerformanceFrequency(freq);
  nsum := 0;
  for kgunum := 0 to 1 do
    for chnum := 0 to 7 do
    begin
      wret := DCON_Clear_Counter(kgu_counter_com_number[kgunum], 1, -1, chnum, 0, 200);
      QueryPerformanceCounter(kgu_st_time[kgunum, chnum]);
      kgu_sumx[kgunum, chnum] := 0;
      kgu_sumx2[kgunum, chnum] := 0;
      for i1 := 0 to 10 do
      begin
        kgu_freqHist[kgunum, chnum, i1] := 0;
      end;
    end;

  writeTimeLog('init  end');

  HTTPsrv := TTCPHttpDaemon.create;
(*
  ObjFileName := application.ExeName+'.jdata';
  if fileexists(ObjFileName) then  begin
    strlist:=tstringlist.Create;
    strlist.LoadFromFile(ObjFileName);
    str1:=strlist.Text;
    jsonobj := TlkJSON.ParseText(str1) as TlkJSONobject;
  end else *)
//  application.Minimize;
//  Ic(1, Application.Icon);  // ????????? ?????? ? ????
//  application.Minimize;

end;

procedure THTTPSRVForm.mac30TimerTimer(Sender: TObject);
var
HTTP : THTTPSend;
i : integer;
str1, tmpstr : ansistring;
idhhttp_insat:tidhttp;
begin
  mac30Timer.Enabled:=false;
  StatusBar1.Panels[0].Text :=formatdatetime('data HH:NN:SS>',now);
    try
         begin
          idhhttp_insat:=tidhttp.Create(self);
          tmpstr := idhhttp_insat.get(URLED.Text);
          mac30_data := system.copy(tmpstr, pos('{', tmpstr), length(tmpstr) - 1);
          StatusBar1.Panels[0].Text :=formatdatetime('data HH:NN:SS<',now);
          end
        Except
              On E: EIdException do
                  StatusBar1.Panels[0].Text :=formatdatetime('data HH:NN:SS err',now);
    end;
          idhhttp_insat.Free;
mac30Timer.Enabled:=true;;
end;

constructor TTCPHttpDaemon.Create;
begin
  inherited create(false);
  sock := TTCPBlockSocket.create;
  FreeOnTerminate := true;
  Priority := tpNormal;
end;

destructor TTCPHttpDaemon.Destroy;
begin
  Sock.free;
  inherited Destroy;
end;

procedure TTCPHttpDaemon.Execute;
var
  ClientSock: TSocket;
begin
//  writeTimeLog('open sock');
  with sock do
  begin
    CreateSocket;
    setLinger(true, 10);
    bind('0.0.0.0', IntToStr(PortNum));
    listen;
//    writeTimeLog('Listen sock');
    repeat
      if need_terminate then
      begin
//        writeTimeLog('Client terminated');
        break;
      end;
      if canread(1000) then
      begin
//        writeTimeLog('Client read sock');
        if need_terminate then
          exit;
        ClientSock := accept;
        if lastError = 0 then
          TTCPHttpThrd.create(ClientSock);
      end;
    until false;
  end;
end;

{ TTCPHttpThrd }

constructor TTCPHttpThrd.Create(Hsock: TSocket);
begin
//  writeTimeLog('TCPHttpThrd.Create');

  inherited create(false);
  sock := TTCPBlockSocket.create;
  Headers := TStringList.Create;
  InputData := TMemoryStream.Create;
  OutputData := TMemoryStream.Create;
  Sock.socket := Hsock;
  FreeOnTerminate := true;
  Priority := tpNormal;
end;

destructor TTCPHttpThrd.Destroy;
begin
  Sock.free;
  Headers.Free;
  InputData.Free;
  OutputData.Free;
  inherited Destroy;
end;

procedure TTCPHttpThrd.Execute;
var
  b: byte;
  timeout: integer;
  s: string;
  method, uri, protocol: ansistring;
  size: integer;
  x, n: integer;
  resultcode: integer;
begin
  timeout := 120000;
  //read request line
  s := sock.RecvString(timeout);
  if sock.lasterror <> 0 then
    Exit;
  if s = '' then
    Exit;
  method := fetch(s, ' ');
  if (s = '') or (method = '') then
    Exit;
  uri := fetch(s, ' ');
  if uri = '' then
    Exit;
  protocol := fetch(s, ' ');
  headers.Clear;
  size := -1;
  //read request headers
  if protocol <> '' then
  begin
    if pos('HTTP/', protocol) <> 1 then
      Exit;
    repeat
      s := sock.RecvString(timeout);
      if sock.lasterror <> 0 then
        Exit;
      if s <> '' then
        Headers.add(s);
      if Pos('CONTENT-LENGTH:', Uppercase(s)) = 1 then
        size := StrToIntDef(SeparateRight(s, ' '), -1);
    until s = '';
  end;
  //recv document...
  InputData.Clear;
  if size >= 0 then
  begin
    InputData.SetSize(size);
    x := Sock.RecvBufferEx(InputData.Memory, size, timeout);
    InputData.SetSize(x);
    if sock.lasterror <> 0 then
      Exit;
  end;
  OutputData.Clear;
  resultcode := ProcessHttpRequest(method, uri);
  sock.SendString('HTTP/1.0 ' + IntTostr(resultcode) + CRLF);
  if protocol <> '' then
  begin
    headers.Add('Access-Control-Allow-Origin: *');
    headers.Add('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
    headers.Add('Content-length: ' + IntTostr(OutputData.Size));
    headers.Add('Connection: close');
    headers.Add('Date: ' + Rfc822DateTime(now));
    headers.Add('Server: Synapse HTTP server demo');
    headers.Add('');
    for n := 0 to headers.count - 1 do
      sock.sendstring(headers[n] + CRLF);
  end;
  if sock.lasterror <> 0 then
    Exit;
  Sock.SendBuffer(OutputData.Memory, OutputData.Size);
end;

function TTCPHttpThrd.ProcessHttpRequest(Request, URI: ansistring): integer;
var
  l: TStringlist;
  resp: ansistring;
  stmp, jreq: ansistring;
  amppos: integer;
begin
  LastIncomeConnection := now;
//sample of precessing HTTP request:
// InputData is uploaded document, headers is stringlist with request headers.
// Request is type of request and URI is URI of request
// OutputData is document with reply, headers is stringlist with reply headers.
// Result is result code
  result := 504;
  if Request = 'GET' then
  begin
    headers.Clear;
    headers.Add('Content-type: Text/Html');
    l := TStringList.Create;
    try
      if (pos('callback=', URI) <> 0) then
      begin
        stmp := copy(URI, pos('callback=', URI) + 9, length(URI));
        amppos := pos('get_member', stmp);
        if amppos > 0 then
          jreq := copy(stmp, 1, amppos - 2);
      end;
      resp := currentdata;
      if (pos('get_hist', URI) <> 0) then
        resp := TextFromJson;
      if (pos('get_ziphist', URI) <> 0) then
        resp := compress2send(TextFromJson);

      if  (pos('get_current', URI) <> 0) then
        resp := json_last_data;

      resp := jreq + '(' + resp + ');';
      l.Add(resp);
      l.SaveToStream(OutputData);
    finally
      l.free;
    end;
    Result := 200;
  end;
end;

procedure THTTPSRVForm.SpeedButton1Click(Sender: TObject);
var
  JSON: TlkJSONobject;
  Data: TlkJSONobject;
  jcurdata: TlkJSONobject;
  t_id, t_vc, t_vn, t_vdn, t_vv, t_vt, t_vs: tlkjsonlist;
  jtype: ansistring;
  jsonstr: ansistring;
  i, id: integer;
  r1, r2: double;
//  rl : tstringlist;
  offset, position, h, g: integer;
  s: ansistring;
  str1 :ansistring;
  ff: tfilestream;
  js: tlkjsonstring;
//  jn,jval :tlkjsonnumber;
  rlist: tlkjsonlist;
  jnull: tlkjsonnull;
  r: array[0..255] of ansistring;
  pointpos: integer;
  resrecord: ansistring;
  wret: word;
  dtime: double;
  systime: _systemtime;
  chnum, i1, i2, i3: integer;
  Backup_history: ansistring;
  cnt_str : ansistring;
  procedure read_counter_and_reset(kgunum: integer; chnum: integer);
  var
    i1: integer;
    fintime: int64;
  begin
    QueryPerformanceCounter(fintime);
    wret := DCON_Read_Counter(kgu_counter_com_number[kgunum], 1, -1, chnum, 0, 200, @cntVal);
    if wret > 0 then
    begin
       cnt_str := cnt_str+' Error read counter KGU = ' + IntToStr(kgunum + 1) + ' channel = ' + IntToStr(chnum);
       writetimelog('Error read counter KGU = ' + IntToStr(kgunum + 1) + ' channel = ' + IntToStr(chnum));
      exit;
    end;
   cnt_str := cnt_str+' KGU=' + IntToStr(kgunum + 1) + ' ch=' + IntToStr(chnum)+' V='+inttostr(cntval);
    dtime := (fintime - kgu_st_time[kgunum, chnum]) * 1.0 / freq;
    kgu_freq[kgunum, chnum] := (cntVal * 30.0 * 0.90) / dtime;
    wret := DCON_Clear_Counter(kgu_counter_com_number[kgunum], 1, -1, chnum, 0, 200);
    QueryPerformanceCounter(kgu_st_time[kgunum, chnum]);

    for i1 := 0 to 9 do
    begin
      kgu_freqHist[kgunum, chnum, i1] := kgu_freqHist[kgunum, chnum, i1 + 1];
    end;
    kgu_freqHist[kgunum, chnum, 10] := kgu_freq[kgunum, chnum];
    skgu_freq[kgunum, chnum] := 0;
    for i1 := 0 to 10 do
    begin
      if kgu_freqhist[kgunum, chnum, i1] < 10 then
        skgu_freq[kgunum, chnum] := skgu_freq[kgunum, chnum] + trunc(kgu_freq[kgunum, chnum])
      else
        skgu_freq[kgunum, chnum] := skgu_freq[kgunum, chnum] + trunc(kgu_freqhist[kgunum, chnum, i1]);
    end;
    skgu_freq[kgunum, chnum] := (skgu_freq[kgunum, chnum] div 10000) * 1000;

    kgu_sumx[kgunum, chnum] := kgu_sumx[kgunum, chnum] + kgu_freq[kgunum, chnum];
    kgu_sumx2[kgunum, chnum] := kgu_sumx2[kgunum, chnum] + kgu_freq[kgunum, chnum] * kgu_freq[kgunum, chnum];
    if (nsum > 2) then
    begin
      kgu_mean[kgunum, chnum] := kgu_sumx[kgunum, chnum] / nsum;
      kgu_std[kgunum, chnum] := kgu_sumx2[kgunum, chnum] - 2 * kgu_sumx[kgunum, chnum] * kgu_mean[kgunum, chnum] + nsum * kgu_mean[kgunum, chnum] * kgu_mean[kgunum, chnum];
      if (kgu_std[kgunum, chnum] >= 0) then
      begin
        kgu_std[kgunum, chnum] := sqrt(kgu_std[kgunum, chnum] / (nsum - 1));
      end;
    end;
  end;

  procedure AddVarToRecord(varname, varval: ansistring);
  begin
    resrecord := resrecord + '"' + varname + '" : ' + varval + ', ';
  end;

procedure writeWebFiles(filename, filedata:ansistring);
var
 ff:tfilestream;
begin
      if fileexists(filename) then
        deletefile(filename);
      ff := tfilestream.Create(filename, fmcreate or fmOpenWrite or fmsharedenynone);
      ff.Write(filedata[1], length(filedata));
      ff.Free;

end;

procedure writecurrentfiles();
var
 lstr: integer;
begin

      writeWebFiles('d:\www\mob\last_data30.js ', mac30_data);
      writeWebFiles('d:\www\JSON_last_data30.js ', mac30_data);
      writeWebFiles('d:\www\kguv2\last_data30.js ',mac30_data);
      writeWebFiles('d:\www\mob\JSON_last_data.js', resrecord);
      writeWebFiles('d:\www\JSON_last_data.js', resrecord);
      writeWebFiles('d:\www\kguv2\JSON_last_data.js', resrecord);

end;
procedure WriteHistFile();
begin
      writewebfiles(extractfilepath(application.ExeName) + '\history.json',textfromjson);
      Backup_history := extractfilepath(application.ExeName) + '\history.' + formatDateTime('yyyy__mm_dd_hh', now);
      writewebfiles(Backup_history,textfromjson);
      writeWebFiles('d:\www\hist.zip', compress2send(textfromjson));
      writeWebFiles('d:\www\mob\hist.zip', compress2send(textfromjson));
      writeWebFiles('d:\www\kguv2\hist.zip', compress2send(textfromjson));

end;


begin
  LastUpdate := now;
//  timer1.Enabled := false;
  cnt_str := '';
  caption := formatDateTime('dd/mm/yyyy HH:NN:SS', now) + formatDateTime(' Старт:dd/mm/yyyy HH:NN:SS', startTime);
  nsum := nsum + 1;
  kgu1freqtxt.Caption := format('Freq = %d', [skgu_freq[0, 1] * 2]);
  kgu2freqtxt.Caption := format('Freq = %d', [skgu_freq[0, 1] * 2]);

  if (nsum > 2) then
  begin
    if (kgu_freq[0, 1] > 0) then
      kgu1stdtxt.Caption := format('STD dev = %.2f%', [kgu_std[0, 1] * 100 / kgu_freq[0, 1]]);
    if (kgu_freq[1, 1] > 0) then
      kgu2stdtxt.Caption := format('STD dev = %.2f%', [kgu_std[1, 1] * 100 / kgu_freq[1, 1]]);
  end;

  resrecord := '{';
    FormatSettings.DecimalSeparator := '.';

  try
      if mac30_data='' then exit;
    jsonstr := mac30_data;
    Memobody.Lines.text :=jsonstr;
    rlist := tlkjsonlist.Create;
    jnull := tlkjsonnull.Create;
    Data := TlkJSON.ParseText(jsonstr) as TlkJSONobject;
    if Data = nil then
    begin
      memo1.Lines.Clear;
      memo1.Lines.add('parse error');
      memo1.Lines.add(jsonstr);
      timer1.Enabled := true;
      exit;
    end;
    case Data.Field['ID'].SelfType of
      jsBase:
        jtype := 'other type: xs is base';
      jsNumber:
        jtype := 'other type: xs is number';
      jsString:
        jtype := 'other type: xs is string';
      jsBoolean:
        jtype := 'other type: xs is boolean';
      jsNull:
        jtype := 'other type: xs is null';
      jsList:
        jtype := 'other type: xs is list';
      jsObject:
        jtype := 'other type: xs is object';
    end;
    t_id := Data.field['ID'] as tlkjsonlist;
    t_vn := Data.field['VN'] as tlkjsonlist;
    t_vc := Data.field['VC'] as tlkjsonlist;
    t_vv := Data.field['VV'] as tlkjsonlist;
    t_vt := Data.field['VT'] as tlkjsonlist;
    for h := 0 to 93 do
    begin
      rlist.Add(tlkjsonnull.Create);
    end;
    offset := 0;
    h := 0;
    while (h < t_id.Count) do
    begin
      id := (t_id.Child[h] as tlkjsonnumber).Value;
      g := (t_vc.Child[h] as tlkjsonnumber).Value;
      r[id] := '0';
      position := offset;
      while (position < (offset + g)) do
      begin
        if ((t_vn.child[position] as tlkjsonstring).Value = 'VALUE') then
        begin
          if (id = 45) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[0, 0]]);
          if (id = 46) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[0, 1]]);
          if (id = 47) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[0, 2]]);
          if (id = 51) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[0, 3]]);
          if (id = 95) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[1, 0]]);
          if (id = 96) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[1, 1]]);
          if (id = 97) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[1, 2]]);
          if (id = 101) then
            (t_vv.Child[position] as tlkjsonstring).Value := format('%d', [skgu_freq[1, 3]]);
          s := (t_vv.Child[position] as tlkjsonstring).Value;
          s := ansireplacestr(s, ',', '.');
          pointpos := pos('.', s);
          if pointpos > 0 then
          begin
            s := system.copy(s, 1, pointpos + 2);
          end;
          r[id] := s;
        end;
        inc(position);
      end;
      offset := offset + g;
      inc(h);
    end;
    CurrentData := tlkjson.GenerateText(Data);
    Data.Free;
  finally
  end;

  if ((now - prevUpdate) * 24 * 3600 > 0) then
  begin

    prevUpdate := now;
    AddVarToRecord('time', '"' + formatdatetime('hh:nn:ss', now) + '"');
    AddVarToRecord('date', '"' + formatdatetime('dd:mm:yy', now) + '"');
////////////////////////////////////////////////////////////////////////////////////////////////////////
//                        KGU-1                                                                      ///
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Обороты
    r[45]:='NaN';
    r[46]:='NaN';
    r[47]:='NaN';
    r[51]:='NaN';
//Уровни
    r[43]:='NaN';
    r[36]:='NaN';
    r[32]:='NaN';
    r[33]:='NaN';
//Температуры
    r[5]:='NaN';
    r[11]:='NaN';
    r[23]:='NaN';
    r[111]:='NaN';
    r[7]:='NaN';
    r[12]:='NaN';
    r[24]:='NaN';
    r[9]:='NaN';
    r[26]:='NaN';
    r[28]:='NaN';

    r[10]:='NaN';
    r[27]:='NaN';
    r[29]:='NaN';
//Температуры на БО1 kgu 1
    r[14]:='NaN';
    r[15]:='NaN';
    r[16]:='NaN';
    r[17]:='NaN';
//Температуры на БО2 kgu 1
    r[18]:='NaN';
    r[19]:='NaN';
    r[20]:='NaN';
    r[21]:='NaN';

//Обороты

    AddVarToRecord('k1td1', r[45]);
    AddVarToRecord('k1td2', r[46]);
    AddVarToRecord('k1td3', r[47]);
    AddVarToRecord('k1pg', r[51]);
//Уровни
    AddVarToRecord('k1sbr', r[35]);
    AddVarToRecord('k1vanna', r[36]);
    AddVarToRecord('k1bo1', r[32]);
    AddVarToRecord('k1bo2', r[33]);
//Температуры


    AddVarToRecord('k1t1', r[5]);
    AddVarToRecord('k1t5', r[11]);
    AddVarToRecord('k1t9', r[23]);
    AddVarToRecord('k1t13', r[111]);

    AddVarToRecord('k1t2', r[7]);
    AddVarToRecord('k1t6', r[12]);
    AddVarToRecord('k1t10', r[24]);

    AddVarToRecord('k1t3', r[9]);
    AddVarToRecord('k1t7', r[26]);
    AddVarToRecord('k1t11', r[28]);


    AddVarToRecord('k1t4', r[10]);
    AddVarToRecord('k1t8', r[27]);
    AddVarToRecord('k1t12', r[29]);

//Температуры на БО1 kgu 1
    AddVarToRecord('k1t181', r[14]);
    AddVarToRecord('k1t191', r[15]);
    AddVarToRecord('k1t201', r[16]);
    AddVarToRecord('k1t211', r[17]);
//Температуры на БО2 kgu 1

    AddVarToRecord('k1t182', r[18]);
    AddVarToRecord('k1t192', r[19]);
    AddVarToRecord('k1t202', r[20]);
    AddVarToRecord('k1t212', r[21]);

//    r1 := strToFloat(r[11]) - strtofloat(r[12]);
    AddVarToRecord('k1dt5t6', 'NaN');
//    r1 := strToFloat(r[9]) - strtofloat(r[10]);
    AddVarToRecord('k1dt3t4', 'NaN');


////////////////////////////////////////////////////////////////////////////////////////////////////////
//                        KGU-2                                                                      ///
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Обороты
    AddVarToRecord('k2td1', r[95]);
    AddVarToRecord('k2td2', r[96]);
    AddVarToRecord('k2td3', r[97]);
    AddVarToRecord('k2pg', r[101]);
//Уровни
    AddVarToRecord('k2sbr', r[85]);
    AddVarToRecord('k2vanna', r[86]);
    AddVarToRecord('k2bo1', r[82]);
    AddVarToRecord('k2bo2', r[83]);
//Температуры
    AddVarToRecord('k2t1', r[55]);
    AddVarToRecord('k2t5', r[61]);
    AddVarToRecord('k2t9', r[73]);
    AddVarToRecord('k2t13', r[112]);

    AddVarToRecord('k2t2', r[57]);
    AddVarToRecord('k2t6', r[62]);
    AddVarToRecord('k2t10', r[74]);

    AddVarToRecord('k2t3', r[59]);
    AddVarToRecord('k2t7', r[76]);
    AddVarToRecord('k2t11', r[78]);

    AddVarToRecord('k2t4', r[60]);
    AddVarToRecord('k2t8', r[77]);
    AddVarToRecord('k2t12', r[79]);

//Температуры на БО1 kgu 2
    AddVarToRecord('k2t181', r[64]);
    AddVarToRecord('k2t191', r[65]);
    AddVarToRecord('k2t201', r[66]);
    AddVarToRecord('k2t211', r[67]);
//Температуры на БО2 kgu 2
    AddVarToRecord('k2t182', r[68]);
    AddVarToRecord('k2t192', r[69]);
    AddVarToRecord('k2t202', r[70]);
    AddVarToRecord('k2t212', r[71]);

    //        k2sdt5t6 = k2dt5t6.toString();
    r1 := strToFloat(r[61]) - strtofloat(r[62]);
    AddVarToRecord('k2dt5t6', format('%f', [r1]));
    //        k2sdt3t4 = k2dt3t4.toString();
    r1 := strToFloat(r[59]) - strtofloat(r[60]);
    AddVarToRecord('k2dt3t4', format('%f', [r1]));
    resrecord :=     resrecord+insat_data;
    if length(booster_data)>1 then       resrecord :=     resrecord+','+booster_data;

      //amchart process
    resrecord := resrecord + ' }';
    str1 := resrecord;

//    writetimelog('## Update History = ' + resrecord);
     inc(linenum);
    writeCurrentFiles();

    if (linenum mod 10 )=0  then begin
        histjson.Add(resrecord);
        JSON_last_data :=resrecord;
        while histjson.Count > (24 * 360) do
          histjson.Delete(0);
        textfromJson := GenerateOutText(histjson);
        WriteHistFile();
    end;



  end;
//  rl.Free;
end;

procedure THTTPSRVForm.SpeedButton2Click(Sender: TObject);
begin
  form1.Show;
end;

var
  jhist: tlkjsonlist;
  jcount: integer;
  jo: tlkjsonobject;
  jb: tlkjsonbase;
  str: ansistring;

procedure THTTPSRVForm.ApplicationEvents1Minimize(Sender: TObject);
begin
  PostMessage(Handle, WM_SYSCOMMAND, SC_MINIMIZE, 0);
end;

procedure THTTPSRVForm.quit1Click(Sender: TObject);
begin
  application.Terminate;
end;

//procedure THTTPSRVForm.MinimizeClick(Sender: TObject);
//begin
//  ShowWindow(Application.Handle, SW_hide); // Восстанавливаем кнопку программы
//  ShowWindow(Handle, SW_hide); // Восстанавливаем окно программы
//  application.Minimize;
//end;

procedure THTTPSRVForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
//  ShowWindow(Application.Handle, SW_hide); // прячем  кнопку программы
  ShowWindow(Handle, SW_hide);
  Action := caNone;
end;

var
  ini: tinifile;
  jconf: tlkjsonobject;

procedure THTTPSRVForm.Restore1Click(Sender: TObject);
begin
//  ShowWindow(Application.Handle, SW_SHOW); // Восстанавливаем кнопку программы
  ShowWindow(Handle, SW_SHOW); // Восстанавливаем окно программы

end;

procedure THTTPSRVForm.Restart1Click(Sender: TObject);
var
  FullProgPath: PansiChar;
begin
  FullProgPath := PansiChar(Application.ExeName);
   // ShowWindow(Form1.handle,SW_HIDE);
  WinExec(FullProgPath, SW_SHOW); // Or better use the CreateProcess function
  Application.Terminate; // or: Close;
  exit;
end;

var
  confjson: tstringlist;
  i1, i2, i3, i4, i5, i6: integer;
  str1, str2: ansistring;

var
  // ????????? ?? ??????? ?????? ??????????
  CurrentRaiseList: Pointer = nil;

// ??????? ?????????? ??????? ?????????? ?? ?????
function GetNextException: Pointer;
begin
  if CurrentRaiseList = nil then
    CurrentRaiseList := RaiseList;
  if CurrentRaiseList <> nil then
  begin
    Result := PRaiseFrame(CurrentRaiseList)^.ExceptObject;
    PRaiseFrame(CurrentRaiseList)^.ExceptObject := nil;
    CurrentRaiseList := PRaiseFrame(CurrentRaiseList)^.NextRaise;
  end
  else
    Result := nil;
end;

var
  ExceptionStack: TList;
  E: Exception;
  wret: word;
  kgunum, chnum: integer;

procedure THTTPSRVForm.tangoTimerTimer(Sender: TObject);
var
i : integer;
str1, jsonstr  : ansistring;
tangourl :string;

tango_req:tidhttp;
begin

  tangotimer.Enabled :=false;
  StatusBar1.Panels[2].Text :=formatdatetime('tango HH:NN:SS>',now);
    try
    begin

//    tangourl:= 'http://355:www@tangoapps1.jinr.ru/clients/mnemo/tango/rest/rc4/devices/booster/thermo/rpl/attributes/value/plain?_dc=1607891007588&attr=State&attr=Status&attr=RPR-The06&attr=RPL-The06';
    tangourl:= 'http://355:www@tangoapps1.jinr.ru/clients/mnemo/tango/rest/rc4/devices/booster/thermo/rpl/attributes/value/'+
    'plain?_dc=1607891007588&attr=State&attr=Status&attr=RPL-The01&attr=RPL-The02&attr=RPL-The03&attr=RPL-The04&attr=RPL-The05'+
    '&attr=RPL-The06&attr=RPL-The07&attr=RPL-The08&attr=RPL-The09&attr=RPL-The10&attr=RPL-The11&attr=RPL-The12&attr=RPL-The13'+
    '&attr=RPL-The14&attr=RPL-The15&attr=RPL-The16&attr=RPL-Tn01&attr=RPL-Tn02&attr=RPL-Tn03&attr=RPL-Tn04&attr=RPL-Tn05&'+
    'attr=RPL-Tn06&attr=RPL-Tn07&attr=RPL-Tn08&attr=RPL-Tn10&attr=RPL-Tn11&attr=RPL-Tn12&attr=RPL-Tn13&attr=RPL-Tn15&attr=RPL-Tn16&attr=RPL-Tn17'+
    '&attr=RPL-Tn18&attr=RPL-Tn20&attr=RPL-Tn21&attr=RPL-Tn22&attr=RPL-Tn23&attr=RPL-Tn25&attr=RPL-Tn26&attr=RPL-Tmg1&attr=RPL-Tmg4';
      tango_req:=tidhttp.Create(self);
      jsonstr := tango_req.get(tangourl);
      i := pos('"RPL-The06"',jsonstr);
      str1 :='';
      if i>=1 then begin
         jsonstr := system.Copy(jsonstr,i,99999999999);
         i := pos(',',jsonstr);
         jsonstr := system.Copy(jsonstr,1,i);
         str1 :=jsonstr;
      end;
    tango_req.Free;
   tangourl:='http://502:www@tangoapps1.jinr.ru/clients/mnemo/tango/rest/rc4/devices/booster/thermo/rpr/attributes/value/'+
       'plain?_dc=1607895188415&attr=State&attr=Status&attr=RPR-The01&attr=RPR-The02&attr=RPR-The03&attr=RPR-The04&attr=RPR-The05&attr=RPR-The06'+
       '&attr=RPR-The07&attr=RPR-The08&attr=RPR-The09&attr=RPR-The10&attr=RPR-The11&attr=RPR-The12&attr=RPR-The13&attr=RPR-The14'+
       '&attr=RPR-The15&attr=RPR-The16&attr=RPR-Tn01&attr=RPR-Tn02&attr=RPR-Tn03&attr=RPR-Tn04&attr=RPR-Tn05&attr=RPR-Tn06&attr=RPR-Tn07'+
       '&attr=RPR-Tn08&attr=RPR-Tn10&attr=RPR-Tn11&attr=RPR-Tn12&attr=RPR-Tn13&attr=RPR-Tn15&attr=RPR-Tn16&attr=RPR-Tn17&attr=RPR-Tn18'+
       '&attr=RPR-Tn20&attr=RPR-Tn21&attr=RPR-Tn22&attr=RPR-Tn23&attr=RPR-Tn25&attr=RPR-Tn26&attr=RPR-Tmg1&attr=RPR-Tmg2&attr=RPR-Tmg4';
      tango_req:=tidhttp.Create(self);
      jsonstr := tango_req.get(tangourl);
      i := pos('"RPR-The06"',jsonstr);
      if i>=1 then begin
         jsonstr := system.Copy(jsonstr,i,99999999999);
         i := pos(',',jsonstr);
         jsonstr := system.Copy(jsonstr,1,i);
         str1 :=str1+','+jsonstr;
      end;
      booster_data := str1;
      StatusBar1.Panels[2].Text :=formatdatetime('tango HH:NN:SS<',now);
        StatusBar1.Panels[3].text :=jsonstr;
    end
    except
                On E: EIdException do
                  StatusBar1.Panels[2].Text :=formatdatetime('tango HH:NN:SS err',now);
  end;
  tangotimer.Enabled :=true;
  tango_req.Free;
end;

procedure THTTPSRVForm.tmr1Timer(Sender: TObject);
begin
  exit;
   if (now - LastUpdate) * 24 * 3600 > 160 then
  begin
    writetimelog('#### restart application/ Reason: update timer inactive for 160 sec  ############################################');

    FullProgPath := PansiChar(Application.ExeName);
    need_terminate := true;
   // ShowWindow(Form1.handle,SW_HIDE);
    WinExec(FullProgPath, SW_SHOW); // Or better use the CreateProcess function
    Application.Terminate; // or: Close;
    exit;
  end;

end;

procedure THTTPSRVForm.insat_timerTimer(Sender: TObject);
var
HTTP : THTTPSend;
i : integer;
str1, jsonstr : ansistring;
insat_req:tidhttp;
begin
  insat_timer.Enabled :=false;
  StatusBar1.Panels[1].Text :=formatdatetime('Insat HH:NN:SS>',now);
    try
    begin
      insat_req:=tidhttp.Create(self);
      jsonstr := insat_req.get(urlInsat);
      jsonstr := ansiReplacestr(jsonstr,'}','');
      insat_data :=ansiReplacestr(jsonstr,'{','');
      StatusBar1.Panels[1].Text :=formatdatetime('Insat HH:NN:SS<',now);
      memo2.Lines.Text :=insat_data;
    end
    except
                On E: EIdException do
                  StatusBar1.Panels[1].Text :=formatdatetime('insat HH:NN:SS err',now);

  end;
  insat_timer.Enabled :=true;
  insat_req.Free;
end;
var l1 : integer;
initialization
  startTime := now;
  LastUpdate := now;

  writeTimeLog('init  begin');

  confjson := tstringlist.Create;
  histJson := tstringlist.Create;
  url := 'http://159.93.126.233:8080/proxy.cgi?id=6';
  urlInsat := 'http://10.0.10.103:8010/data';
  urlInsat := 'http://159.93.40.150:8010/data';
   //  urled.Text:='http://10.0.10.30:8080/proxy.cgi?id=6';
  if fileexists(extractfilepath(application.ExeName) + '\config.json') then
  begin
    confjson.LoadFromFile(extractfilepath(application.ExeName) + '\config.json');
    jconf := tlkjson.parsetext(confjson[0]) as tlkjsonobject;
    if jconf <> nil then
    begin
      if jconf.field['url'] <> nil then
        url := (jconf.field['url'] as tlkjsonstring).Value;
      if jconf.field['kgu1_counter_com_number'] <> nil then
        kgu_counter_com_number[0] := char(strtoint((jconf.field['kgu1_counter_com_number'] as tlkjsonstring).Value));
      if jconf.field['kgu2_counter_com_number'] <> nil then
        kgu_counter_com_number[1] := char(strtoint((jconf.field['kgu2_counter_com_number'] as tlkjsonstring).Value));
    end;

  end;

  if fileexists(extractfilepath(application.ExeName) + '\history.json') then
  begin
    histjson.LoadFromFile(extractfilepath(application.ExeName) + '\history.json');
    textfromJson := histjson.GetText;
    str1 := textfromJson;
    histJson.Clear;
    i1 := 0;
    while (length(str1) > 2) do
    begin
      l1 := length(str1);
      i2 := pos('{', str1);
      i3 := pos('}', str1);
      if ((i2 > 0) and (i3 > 0) and (i2 < i3)) then
      begin
        str2 := system.copy(str1, i2, i3 - i2 + 1);
        str1 := system.copy(str1, i3 + 1, length(str1));
        histJson.add(str2);

      end
      else
        break;

    end;
    textfromJson := GenerateOutText(histjson);
  end
  else
  begin
    textfromJson := '[]';
  end;
  LastIncomeConnection := now;

finalization
  writeTimeLog('finalize begin');

end.

